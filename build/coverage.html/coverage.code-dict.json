{"/home/travis/build/npmtest/node-npmtest-eventproxy/test.js":"/* istanbul instrument in package npmtest_eventproxy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-eventproxy/lib.npmtest_eventproxy.js":"/* istanbul instrument in package npmtest_eventproxy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_eventproxy = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_eventproxy = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-eventproxy/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-eventproxy && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_eventproxy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_eventproxy\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_eventproxy.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_eventproxy.rollup.js'] =\n            local.assetsDict['/assets.npmtest_eventproxy.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_eventproxy.__dirname + '/lib.npmtest_eventproxy.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-eventproxy/node_modules/eventproxy/index.js":"module.exports = require('./lib/eventproxy');\n","/home/travis/build/npmtest/node-npmtest-eventproxy/node_modules/eventproxy/lib/eventproxy.js":"/*global define*/\n!(function (name, definition) {\n  // Check define\n  var hasDefine = typeof define === 'function',\n    // Check exports\n    hasExports = typeof module !== 'undefined' && module.exports;\n\n  if (hasDefine) {\n    // AMD Module or CMD Module\n    define('eventproxy_debug', function () {return function () {};});\n    define(['eventproxy_debug'], definition);\n  } else if (hasExports) {\n    // Node.js Module\n    module.exports = definition(require('debug')('eventproxy'));\n  } else {\n    // Assign to common namespaces or simply the global object (window)\n    this[name] = definition();\n  }\n})('EventProxy', function (debug) {\n  debug = debug || function () {};\n\n  /*!\n   * refs\n   */\n  var SLICE = Array.prototype.slice;\n  var CONCAT = Array.prototype.concat;\n  var ALL_EVENT = '__all__';\n\n  /**\n   * EventProxy. An implementation of task/event based asynchronous pattern.\n   * A module that can be mixed in to *any object* in order to provide it with custom events.\n   * You may `bind` or `unbind` a callback function to an event;\n   * `trigger`-ing an event fires all callbacks in succession.\n   * Examples:\n   * ```js\n   * var render = function (template, resources) {};\n   * var proxy = new EventProxy();\n   * proxy.assign(\"template\", \"l10n\", render);\n   * proxy.trigger(\"template\", template);\n   * proxy.trigger(\"l10n\", resources);\n   * ```\n   */\n  var EventProxy = function () {\n    if (!(this instanceof EventProxy)) {\n      return new EventProxy();\n    }\n    this._callbacks = {};\n    this._fired = {};\n  };\n\n  /**\n   * Bind an event, specified by a string name, `ev`, to a `callback` function.\n   * Passing __ALL_EVENT__ will bind the callback to all events fired.\n  * Examples:\n   * ```js\n   * var proxy = new EventProxy();\n   * proxy.addListener(\"template\", function (event) {\n   *   // TODO\n   * });\n   * ```\n   * @param {String} eventname Event name.\n   * @param {Function} callback Callback.\n   */\n  EventProxy.prototype.addListener = function (ev, callback) {\n    debug('Add listener for %s', ev);\n    this._callbacks[ev] = this._callbacks[ev] || [];\n    this._callbacks[ev].push(callback);\n    return this;\n  };\n  /**\n   * `addListener` alias, `bind`\n   */\n  EventProxy.prototype.bind = EventProxy.prototype.addListener;\n  /**\n   * `addListener` alias, `on`\n   */\n  EventProxy.prototype.on = EventProxy.prototype.addListener;\n  /**\n   * `addListener` alias, `subscribe`\n   */\n  EventProxy.prototype.subscribe = EventProxy.prototype.addListener;\n\n  /**\n   * Bind an event, but put the callback into head of all callbacks.\n   * @param {String} eventname Event name.\n   * @param {Function} callback Callback.\n   */\n  EventProxy.prototype.headbind = function (ev, callback) {\n    debug('Add listener for %s', ev);\n    this._callbacks[ev] = this._callbacks[ev] || [];\n    this._callbacks[ev].unshift(callback);\n    return this;\n  };\n\n  /**\n   * Remove one or many callbacks.\n   *\n   * - If `callback` is null, removes all callbacks for the event.\n   * - If `eventname` is null, removes all bound callbacks for all events.\n   * @param {String} eventname Event name.\n   * @param {Function} callback Callback.\n   */\n  EventProxy.prototype.removeListener = function (eventname, callback) {\n    var calls = this._callbacks;\n    if (!eventname) {\n      debug('Remove all listeners');\n      this._callbacks = {};\n    } else {\n      if (!callback) {\n        debug('Remove all listeners of %s', eventname);\n        calls[eventname] = [];\n      } else {\n        var list = calls[eventname];\n        if (list) {\n          var l = list.length;\n          for (var i = 0; i < l; i++) {\n            if (callback === list[i]) {\n              debug('Remove a listener of %s', eventname);\n              list[i] = null;\n            }\n          }\n        }\n      }\n    }\n    return this;\n  };\n  /**\n   * `removeListener` alias, unbind\n   */\n  EventProxy.prototype.unbind = EventProxy.prototype.removeListener;\n\n  /**\n   * Remove all listeners. It equals unbind()\n   * Just add this API for as same as Event.Emitter.\n   * @param {String} event Event name.\n   */\n  EventProxy.prototype.removeAllListeners = function (event) {\n    return this.unbind(event);\n  };\n\n  /**\n   * Bind the ALL_EVENT event\n   */\n  EventProxy.prototype.bindForAll = function (callback) {\n    this.bind(ALL_EVENT, callback);\n  };\n\n  /**\n   * Unbind the ALL_EVENT event\n   */\n  EventProxy.prototype.unbindForAll = function (callback) {\n    this.unbind(ALL_EVENT, callback);\n  };\n\n  /**\n   * Trigger an event, firing all bound callbacks. Callbacks are passed the\n   * same arguments as `trigger` is, apart from the event name.\n   * Listening for `\"all\"` passes the true event name as the first argument.\n   * @param {String} eventname Event name\n   * @param {Mix} data Pass in data\n   */\n  EventProxy.prototype.trigger = function (eventname, data) {\n    var list, ev, callback, i, l;\n    var both = 2;\n    var calls = this._callbacks;\n    debug('Emit event %s with data %j', eventname, data);\n    while (both--) {\n      ev = both ? eventname : ALL_EVENT;\n      list = calls[ev];\n      if (list) {\n        for (i = 0, l = list.length; i < l; i++) {\n          if (!(callback = list[i])) {\n            list.splice(i, 1);\n            i--;\n            l--;\n          } else {\n            var args = [];\n            var start = both ? 1 : 0;\n            for (var j = start; j < arguments.length; j++) {\n              args.push(arguments[j]);\n            }\n            callback.apply(this, args);\n          }\n        }\n      }\n    }\n    return this;\n  };\n\n  /**\n   * `trigger` alias\n   */\n  EventProxy.prototype.emit = EventProxy.prototype.trigger;\n  /**\n   * `trigger` alias\n   */\n  EventProxy.prototype.fire = EventProxy.prototype.trigger;\n\n  /**\n   * Bind an event like the bind method, but will remove the listener after it was fired.\n   * @param {String} ev Event name\n   * @param {Function} callback Callback\n   */\n  EventProxy.prototype.once = function (ev, callback) {\n    var self = this;\n    var wrapper = function () {\n      callback.apply(self, arguments);\n      self.unbind(ev, wrapper);\n    };\n    this.bind(ev, wrapper);\n    return this;\n  };\n\n  var later = (typeof setImmediate !== 'undefined' && setImmediate) ||\n    (typeof process !== 'undefined' && process.nextTick) || function (fn) {\n    setTimeout(fn, 0);\n  };\n\n  /**\n   * emitLater\n   * make emit async\n   */\n  EventProxy.prototype.emitLater = function () {\n    var self = this;\n    var args = arguments;\n    later(function () {\n      self.trigger.apply(self, args);\n    });\n  };\n\n  /**\n   * Bind an event, and trigger it immediately.\n   * @param {String} ev Event name.\n   * @param {Function} callback Callback.\n   * @param {Mix} data The data that will be passed to calback as arguments.\n   */\n  EventProxy.prototype.immediate = function (ev, callback, data) {\n    this.bind(ev, callback);\n    this.trigger(ev, data);\n    return this;\n  };\n  /**\n   * `immediate` alias\n   */\n  EventProxy.prototype.asap = EventProxy.prototype.immediate;\n\n  var _assign = function (eventname1, eventname2, cb, once) {\n    var proxy = this;\n    var argsLength = arguments.length;\n    var times = 0;\n    var flag = {};\n\n    // Check the arguments length.\n    if (argsLength < 3) {\n      return this;\n    }\n\n    var events = SLICE.call(arguments, 0, -2);\n    var callback = arguments[argsLength - 2];\n    var isOnce = arguments[argsLength - 1];\n\n    // Check the callback type.\n    if (typeof callback !== \"function\") {\n      return this;\n    }\n    debug('Assign listener for events %j, once is %s', events, !!isOnce);\n    var bind = function (key) {\n      var method = isOnce ? \"once\" : \"bind\";\n      proxy[method](key, function (data) {\n        proxy._fired[key] = proxy._fired[key] || {};\n        proxy._fired[key].data = data;\n        if (!flag[key]) {\n          flag[key] = true;\n          times++;\n        }\n      });\n    };\n\n    var length = events.length;\n    for (var index = 0; index < length; index++) {\n      bind(events[index]);\n    }\n\n    var _all = function (event) {\n      if (times < length) {\n        return;\n      }\n      if (!flag[event]) {\n        return;\n      }\n      var data = [];\n      for (var index = 0; index < length; index++) {\n        data.push(proxy._fired[events[index]].data);\n      }\n      if (isOnce) {\n        proxy.unbindForAll(_all);\n      }\n      debug('Events %j all emited with data %j', events, data);\n      callback.apply(null, data);\n    };\n    proxy.bindForAll(_all);\n  };\n\n  /**\n   * Assign some events, after all events were fired, the callback will be executed once.\n   *\n   * Examples:\n   * ```js\n   * proxy.all(ev1, ev2, callback);\n   * proxy.all([ev1, ev2], callback);\n   * proxy.all(ev1, [ev2, ev3], callback);\n   * ```\n   * @param {String} eventname1 First event name.\n   * @param {String} eventname2 Second event name.\n   * @param {Function} callback Callback, that will be called after predefined events were fired.\n   */\n  EventProxy.prototype.all = function (eventname1, eventname2, callback) {\n    var args = CONCAT.apply([], arguments);\n    args.push(true);\n    _assign.apply(this, args);\n    return this;\n  };\n  /**\n   * `all` alias\n   */\n  EventProxy.prototype.assign = EventProxy.prototype.all;\n\n  /**\n   * Assign the only one 'error' event handler.\n   * @param {Function(err)} callback\n   */\n  EventProxy.prototype.fail = function (callback) {\n    var that = this;\n\n    that.once('error', function () {\n      that.unbind();\n      // put all arguments to the error handler\n      // fail(function(err, args1, args2, ...){})\n      callback.apply(null, arguments);\n    });\n    return this;\n  };\n\n  /**\n   * A shortcut of ep#emit('error', err)\n   */\n  EventProxy.prototype.throw = function () {\n    var that = this;\n    that.emit.apply(that, ['error'].concat(SLICE.call(arguments)));\n  };\n\n  /**\n   * Assign some events, after all events were fired, the callback will be executed first time.\n   * Then any event that predefined be fired again, the callback will executed with the newest data.\n   * Examples:\n   * ```js\n   * proxy.tail(ev1, ev2, callback);\n   * proxy.tail([ev1, ev2], callback);\n   * proxy.tail(ev1, [ev2, ev3], callback);\n   * ```\n   * @param {String} eventname1 First event name.\n   * @param {String} eventname2 Second event name.\n   * @param {Function} callback Callback, that will be called after predefined events were fired.\n   */\n  EventProxy.prototype.tail = function () {\n    var args = CONCAT.apply([], arguments);\n    args.push(false);\n    _assign.apply(this, args);\n    return this;\n  };\n  /**\n   * `tail` alias, assignAll\n   */\n  EventProxy.prototype.assignAll = EventProxy.prototype.tail;\n  /**\n   * `tail` alias, assignAlways\n   */\n  EventProxy.prototype.assignAlways = EventProxy.prototype.tail;\n\n  /**\n   * The callback will be executed after the event be fired N times.\n   * @param {String} eventname Event name.\n   * @param {Number} times N times.\n   * @param {Function} callback Callback, that will be called after event was fired N times.\n   */\n  EventProxy.prototype.after = function (eventname, times, callback) {\n    if (times === 0) {\n      callback.call(null, []);\n      return this;\n    }\n    var proxy = this,\n      firedData = [];\n    this._after = this._after || {};\n    var group = eventname + '_group';\n    this._after[group] = {\n      index: 0,\n      results: []\n    };\n    debug('After emit %s times, event %s\\'s listenner will execute', times, eventname);\n    var all = function (name, data) {\n      if (name === eventname) {\n        times--;\n        firedData.push(data);\n        if (times < 1) {\n          debug('Event %s was emit %s, and execute the listenner', eventname, times);\n          proxy.unbindForAll(all);\n          callback.apply(null, [firedData]);\n        }\n      }\n      if (name === group) {\n        times--;\n        proxy._after[group].results[data.index] = data.result;\n        if (times < 1) {\n          debug('Event %s was emit %s, and execute the listenner', eventname, times);\n          proxy.unbindForAll(all);\n          callback.call(null, proxy._after[group].results);\n        }\n      }\n    };\n    proxy.bindForAll(all);\n    return this;\n  };\n\n  /**\n   * The `after` method's helper. Use it will return ordered results.\n   * If you need manipulate result, you need callback\n   * Examples:\n   * ```js\n   * var ep = new EventProxy();\n   * ep.after('file', files.length, function (list) {\n   *   // Ordered results\n   * });\n   * for (var i = 0; i < files.length; i++) {\n   *   fs.readFile(files[i], 'utf-8', ep.group('file'));\n   * }\n   * ```\n   * @param {String} eventname Event name, shoule keep consistent with `after`.\n   * @param {Function} callback Callback function, should return the final result.\n   */\n  EventProxy.prototype.group = function (eventname, callback) {\n    var that = this;\n    var group = eventname + '_group';\n    var index = that._after[group].index;\n    that._after[group].index++;\n    return function (err, data) {\n      if (err) {\n        // put all arguments to the error handler\n        return that.emit.apply(that, ['error'].concat(SLICE.call(arguments)));\n      }\n      that.emit(group, {\n        index: index,\n        // callback(err, args1, args2, ...)\n        result: callback ? callback.apply(null, SLICE.call(arguments, 1)) : data\n      });\n    };\n  };\n\n  /**\n   * The callback will be executed after any registered event was fired. It only executed once.\n   * @param {String} eventname1 Event name.\n   * @param {String} eventname2 Event name.\n   * @param {Function} callback The callback will get a map that has data and eventname attributes.\n   */\n  EventProxy.prototype.any = function () {\n    var proxy = this,\n      callback = arguments[arguments.length - 1],\n      events = SLICE.call(arguments, 0, -1),\n      _eventname = events.join(\"_\");\n\n    debug('Add listenner for Any of events %j emit', events);\n    proxy.once(_eventname, callback);\n\n    var _bind = function (key) {\n      proxy.bind(key, function (data) {\n        debug('One of events %j emited, execute the listenner');\n        proxy.trigger(_eventname, {\"data\": data, eventName: key});\n      });\n    };\n\n    for (var index = 0; index < events.length; index++) {\n      _bind(events[index]);\n    }\n  };\n\n  /**\n   * The callback will be executed when the event name not equals with assigned event.\n   * @param {String} eventname Event name.\n   * @param {Function} callback Callback.\n   */\n  EventProxy.prototype.not = function (eventname, callback) {\n    var proxy = this;\n    debug('Add listenner for not event %s', eventname);\n    proxy.bindForAll(function (name, data) {\n      if (name !== eventname) {\n        debug('listenner execute of event %s emit, but not event %s.', name, eventname);\n        callback(data);\n      }\n    });\n  };\n\n  /**\n   * Success callback wrapper, will handler err for you.\n   *\n   * ```js\n   * fs.readFile('foo.txt', ep.done('content'));\n   *\n   * // equal to =>\n   *\n   * fs.readFile('foo.txt', function (err, content) {\n   *   if (err) {\n   *     return ep.emit('error', err);\n   *   }\n   *   ep.emit('content', content);\n   * });\n   * ```\n   *\n   * ```js\n   * fs.readFile('foo.txt', ep.done('content', function (content) {\n   *   return content.trim();\n   * }));\n   *\n   * // equal to =>\n   *\n   * fs.readFile('foo.txt', function (err, content) {\n   *   if (err) {\n   *     return ep.emit('error', err);\n   *   }\n   *   ep.emit('content', content.trim());\n   * });\n   * ```\n   * @param {Function|String} handler, success callback or event name will be emit after callback.\n   * @return {Function}\n   */\n  EventProxy.prototype.done = function (handler, callback) {\n    var that = this;\n    return function (err, data) {\n      if (err) {\n        // put all arguments to the error handler\n        return that.emit.apply(that, ['error'].concat(SLICE.call(arguments)));\n      }\n\n      // callback(err, args1, args2, ...)\n      var args = SLICE.call(arguments, 1);\n\n      if (typeof handler === 'string') {\n        // getAsync(query, ep.done('query'));\n        // or\n        // getAsync(query, ep.done('query', function (data) {\n        //   return data.trim();\n        // }));\n        if (callback) {\n          // only replace the args when it really return a result\n          return that.emit(handler, callback.apply(null, args));\n        } else {\n          // put all arguments to the done handler\n          //ep.done('some');\n          //ep.on('some', function(args1, args2, ...){});\n          return that.emit.apply(that, [handler].concat(args));\n        }\n      }\n\n      // speed improve for mostly case: `callback(err, data)`\n      if (arguments.length <= 2) {\n        return handler(data);\n      }\n\n      // callback(err, args1, args2, ...)\n      handler.apply(null, args);\n    };\n  };\n\n  /**\n   * make done async\n   * @return {Function} delay done\n   */\n  EventProxy.prototype.doneLater = function (handler, callback) {\n    var _doneHandler = this.done(handler, callback);\n    return function (err, data) {\n      var args = arguments;\n      later(function () {\n        _doneHandler.apply(null, args);\n      });\n    };\n  };\n\n  /**\n   * Create a new EventProxy\n   * Examples:\n   * ```js\n   * var ep = EventProxy.create();\n   * ep.assign('user', 'articles', function(user, articles) {\n   *   // do something...\n   * });\n   * // or one line ways: Create EventProxy and Assign\n   * var ep = EventProxy.create('user', 'articles', function(user, articles) {\n   *   // do something...\n   * });\n   * ```\n   * @return {EventProxy} EventProxy instance\n   */\n  EventProxy.create = function () {\n    var ep = new EventProxy();\n    var args = CONCAT.apply([], arguments);\n    if (args.length) {\n      var errorHandler = args[args.length - 1];\n      var callback = args[args.length - 2];\n      if (typeof errorHandler === 'function' && typeof callback === 'function') {\n        args.pop();\n        ep.fail(errorHandler);\n      }\n      ep.assign.apply(ep, args);\n    }\n    return ep;\n  };\n\n  // Backwards compatibility\n  EventProxy.EventProxy = EventProxy;\n\n  return EventProxy;\n});\n"}